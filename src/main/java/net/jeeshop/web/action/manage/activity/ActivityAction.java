package net.jeeshop.web.action.manage.activity;import net.jeeshop.core.BaseAction;import net.jeeshop.core.util.DateTimeUtil;import net.jeeshop.services.manage.activity.ActivityService;import net.jeeshop.services.manage.activity.bean.Activity;import org.slf4j.Logger;import org.slf4j.LoggerFactory;import org.springframework.beans.factory.annotation.Autowired;import org.springframework.context.annotation.Scope;import org.springframework.stereotype.Controller;import org.springframework.web.bind.annotation.ModelAttribute;import org.springframework.web.bind.annotation.RequestMapping;@Scope("prototype")   @Controller   @RequestMapping("/manage/activity")  public class ActivityAction extends BaseAction<Activity> {	private static final long serialVersionUID = 1L;	@Autowired	private ActivityService activityService;	private String[] selectAccountRange;	private static final Logger logger = LoggerFactory.getLogger(ActivityAction.class);	@ModelAttribute	public void initStrutsActionParam(){		this.server = activityService ;	}	protected void selectListAfter() {		pager.setPagerUrl(getBasePath() + "manage/activity/selectList.action");	}	{		toList = "/manage/activity/activityList";		toAdd = "/manage/activity/activityEdit";		toEdit = "/manage/activity/activityEdit";	}		public Activity getE() {		return this.e;	}	public void prepare() throws Exception {		if (this.e == null) {			this.e = new Activity();		}	}	public void insertAfter(Activity e) {		e.clear();	}		@Override	public String toAdd() throws Exception {		String[]  selectAccountRange = request.getParameterValues("selectAccountRange");		if(selectAccountRange!=null){			for(int i=0;i<selectAccountRange.length;i++){				selectAccountRange[i] = null;			}			selectAccountRange = null;		}		return super.toAdd();	}		@Override	public String toEdit() throws Exception {		String[]  selectAccountRange = request.getParameterValues("selectAccountRange");		e = getServer().selectOne(getE());		selectAccountRange = e.getAccountRange().split(",");		for(int i=0;i<selectAccountRange.length;i++){			//去除因struts2控件提交导致的空格			selectAccountRange[i]  = selectAccountRange[i].trim();			logger.error("selectAccountRange[i]="+selectAccountRange[i]);		}		model.addAttribute("e", e);		return toEdit;	}		@Override	public String selectList() throws Exception {		super.selectList();				if(getPager()!=null && getPager().getList()!=null && getPager().getList().size()>0){			for(int i=0;i<getPager().getList().size();i++){				Activity activity = (Activity) getPager().getList().get(i);								activity.setExpire(activity.checkActivity());				if(!activity.isExpire()){					//计算活动多久结束，是否已结束					activity.setActivityEndDateTime(DateTimeUtil.getActivityEndDateTimeString(activity.getEndDate()));									}			}		}				return toList;	}}