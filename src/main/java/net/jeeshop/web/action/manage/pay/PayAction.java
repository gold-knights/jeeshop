package net.jeeshop.web.action.manage.pay;import net.jeeshop.core.BaseAction;import net.jeeshop.core.KeyValueHelper;import net.jeeshop.services.manage.pay.PayService;import net.jeeshop.services.manage.pay.bean.Pay;import org.apache.commons.lang.StringUtils;import org.slf4j.Logger;import org.slf4j.LoggerFactory;import org.springframework.beans.factory.annotation.Autowired;import org.springframework.context.annotation.Scope;import org.springframework.stereotype.Controller;import org.springframework.web.bind.annotation.ModelAttribute;import org.springframework.web.bind.annotation.RequestMapping;/** * 支付方式 * @author huangf * */@Scope("prototype")   @Controller   @RequestMapping("/manage/pay")          public class PayAction extends BaseAction<Pay> {	private static final long serialVersionUID = 1L;	private static final Logger logger = LoggerFactory.getLogger(PayAction.class);	@Autowired	private PayService payService;	{		toList = "/manage/pay/payList";		toAdd = "/manage/pay/payEdit";		toEdit = "/manage/pay/payEdit";	}		@ModelAttribute	public void initStrutsActionParam(){		this.server = payService ;	}		protected void selectListAfter() {		pager.setPagerUrl(getBasePath()+"/manage/pay/selectList.action");	}	public Pay getE() {		return this.e;	}	public void prepare() throws Exception {		if (this.e == null) {			this.e = new Pay();		}else{			e.clear();		}	}	public void insertAfter(Pay e) {		e.clear();	}		@Override	public String insert() throws Exception {		if(true){			throw new RuntimeException("非法请求！");		}		comm();		return super.insert();	}		//根据code获取名称	private void comm() {		logger.error("comm..code="+e.getCode());		String name = KeyValueHelper.get("pay_code_"+e.getCode());		if(StringUtils.isBlank(name)){			throw new NullPointerException("未配置"+e.getCode()+"的支付方式的键值对！");		}				e.setName(name);	}		@Override	public String update() throws Exception {		comm();		return super.update();	}		@Override	public String deletes() throws Exception {		throw new RuntimeException("非法请求！");	}}