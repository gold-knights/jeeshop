package net.jeeshop.web.action.manage.area;import java.io.File;import java.io.IOException;import java.util.Collection;import java.util.List;import java.util.Map;import java.util.TreeMap;import net.jeeshop.core.BaseAction;import net.jeeshop.core.front.SystemManager;import net.jeeshop.core.oscache.FrontCache;import net.jeeshop.core.util.CreateAreaUtil;import net.jeeshop.services.manage.area.AreaService;import net.jeeshop.services.manage.area.bean.Area;import net.sf.json.JSONArray;import org.apache.commons.io.FileUtils;import org.apache.commons.lang.StringUtils;import org.slf4j.LoggerFactory;import org.springframework.beans.factory.annotation.Autowired;import org.springframework.context.annotation.Scope;import org.springframework.stereotype.Controller;import org.springframework.ui.Model;import org.springframework.web.bind.annotation.ModelAttribute;import org.springframework.web.bind.annotation.RequestMapping;import com.alibaba.fastjson.JSON;/** * 区域 *  * @author huangf * */@Scope("prototype")@Controller@RequestMapping("/manage/area")public class AreaAction extends BaseAction<Area> {	private static final long serialVersionUID = 1L;	private static final org.slf4j.Logger logger = LoggerFactory			.getLogger(AreaAction.class);	@Autowired	private AreaService areaService;	@Autowired	private FrontCache frontCache;	@Autowired	private AreaService myServer;	private static String areaTree = null;	private static String addOrUpdate = null;		{		toList = "/manage/area/areaList";		toAdd = "/manage/area/areaEdit";		toEdit = "/manage/area/areaEdit";		areaTree = "/manage/area/areaTree";		addOrUpdate = "/manage/area/addOrUpdate";	}	@ModelAttribute	public void initStrutsActionParam() {		this.server = myServer;	}	protected void selectListAfter() {		pager.setPagerUrl(getBasePath() + "manage/area/selectList.action");	}	public Area getE() {		return this.e;	}	public void prepare() throws Exception {		if (this.e == null) {			this.e = new Area();		}	}	public void insertAfter(Area e) {		e.clear();	}	/**	 * 获得省市区的树结构数据	 * 	 * @return	 * @throws IOException	 */	@RequestMapping("/getAreaTree")	public String getAreaTree() throws IOException {//		// 暂时改成 每次都从数据库读取新的数据//		loadArea();//		frontCache.readJsonArea();						Collection<net.jeeshop.services.front.area.bean.Area> areaList = SystemManager.areaMap				.values();		JSONArray json = JSONArray.fromObject(areaList);		String jsonStr = json.toString();		super.write(jsonStr);		return null;	}	/**	 * 转到 添加/修改菜单 页面	 * 	 * @return	 * @throws Exception	 */	@RequestMapping("/toAddOrUpdate")	public String toAddOrUpdate(Model model) throws Exception {		e.clear();		e.setId(request.getParameter("id"));		e = areaService.selectOne(e);		model.addAttribute("e", e);		return addOrUpdate;	}	/**	 * 添加主类/修改主类、添加子类	 * 	 * @return	 * @throws IOException	 */	@RequestMapping("/doAddOrUpdate")	public String doAddOrUpdate() throws IOException {		String id = request.getParameter("id");		String code = request.getParameter("code");		String pcode = request.getParameter("pcode");		String name = request.getParameter("name");		String children_code = request.getParameter("children_code");		String children_pcode = request.getParameter("children_pcode");		String children_name = request.getParameter("children_name");		String children_type = request.getParameter("children_type");		// debug		StringBuilder buff = new StringBuilder();		buff.append("id=" + id + ";");		buff.append("code=" + code + ";");		buff.append("pcode=" + pcode + ";");		buff.append("name=" + name + ";");		buff.append("children_code=" + children_code + ";");		buff.append("children_pcode=" + children_pcode + ";");		buff.append("children_name=" + children_name + ";");		buff.append("children_type=" + children_type + ";");		logger.error("doAddOrUpdate.buff=" + buff.toString());		if (StringUtils.isBlank(id) || StringUtils.isBlank(code)				|| StringUtils.isBlank(pcode) || StringUtils.isBlank(name)) {			// 非法请求			response.getWriter().write("-1");		} else {			// 修改顶级类别			Area area = new Area();			area.setId(id);			area.setCode(code);			area.setPcode(pcode);			area.setName(name);			areaService.update(area);			if (StringUtils.isBlank(children_code)					|| StringUtils.isBlank(children_pcode)					|| StringUtils.isBlank(children_name)) {				// 忽略			} else {				if (children_type.equals("top")) {// 添加顶级类					children_code = "0";				} else {// 添加子类					children_pcode = code;				}				// 添加子类别				area.clear();				area.setCode(children_code);				area.setPcode(children_pcode);				area.setName(children_name);				areaService.insert(area);			}			// 成功			response.getWriter().write("0");		}		return null;	}	/**	 * 对树的删除操作	 * 	 * @return	 * @throws Exception	 */	@RequestMapping("/delete")	public String delete() throws Exception {		String ids = request.getParameter("ids");		if (StringUtils.isBlank(ids)) {			throw new Exception("非法请求！");		}		logger.error("delete.ids=" + ids + ",deleteParent="				+ request.getParameter("deleteParent"));		areaService.deletes2(ids, request.getParameter("deleteParent"));		// 删除成功返回1		response.getWriter().println("1");		return null;	}	/**	 * 初始化区域树	 * 	 * @return	 */	@RequestMapping("/initAreaTree")	public String initAreaTree() {		Map<String, Area> map = CreateAreaUtil.getAreaMap();		if (map.size() == 0) {			throw new NullPointerException("无数据源！");		}		areaService.initAreaDataToDB(map);		loadArea();		frontCache.readJsonArea();		return areaTree;	}	/**	 * 加载省市区数据	 */	private void loadArea() {		logger.error("loadArea...");		Area area = new Area();		area.setPcode("0");		List<Area> rootData = areaService.selectList(area);		if (rootData == null) {			return;		}		for (int i = 0; i < rootData.size(); i++) {			Area item = rootData.get(i);			getAreaByDigui2(item);		}		Map<String, Area> map = new TreeMap<String, Area>();		for (int i = 0; i < rootData.size(); i++) {			Area item = rootData.get(i);			map.put(item.getCode(), item);		}		String json = JSON.toJSONString(map);		// logger.error("json="+json);		try {			String path = FrontCache.class.getResource("/").getPath();			logger.error("path = " + path);			File file = new File(path + "__area.json");			logger.error("file.getAbsolutePath()=" + file.getAbsolutePath());			FileUtils.writeStringToFile(file, json, "utf-8");		} catch (IOException e) {			e.printStackTrace();		}	}	/**	 * 递归加载省份下的：城市、区域、以后还会有街道的数据	 * 	 * @param item	 */	private void getAreaByDigui2(Area item) {		Area area = new Area();		area.setPcode(item.getCode());		List<Area> children = areaService.selectList(area);		if (children == null) {			return;		}		item.setChildren(children);		for (int i = 0; i < children.size(); i++) {			getAreaByDigui2(children.get(i));		}	}}