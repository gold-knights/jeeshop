package net.jeeshop.web.action.manage.oss;import java.util.HashMap;import java.util.Map;import net.jeeshop.core.BaseAction;import net.jeeshop.core.KeyValueHelper;import net.jeeshop.core.ManageContainer;import net.jeeshop.core.exception.NotThisMethod;import net.jeeshop.core.oscache.ManageCache;import net.jeeshop.services.manage.oss.OssService;import net.jeeshop.services.manage.oss.bean.AliyunOSS;import net.jeeshop.services.manage.oss.bean.Oss;import org.apache.commons.lang.StringUtils;import org.slf4j.Logger;import org.slf4j.LoggerFactory;import org.springframework.beans.factory.annotation.Autowired;import org.springframework.context.annotation.Scope;import org.springframework.stereotype.Controller;import org.springframework.web.bind.annotation.ModelAttribute;import org.springframework.web.bind.annotation.RequestMapping;import com.alibaba.fastjson.JSON;/** * 存储方式 * @author huangf * */@Scope("prototype")   @Controller   @RequestMapping("/manage/oss")          public class OssAction extends BaseAction<Oss> {	private static final long serialVersionUID = 1L;	private static final Logger logger = LoggerFactory.getLogger(OssAction.class);	@Autowired	private OssService ossService;	@Autowired	private ManageCache manageCache;	{		toList = "/manage/oss/ossList";		toAdd = "/manage/oss/ossEdit";		toEdit = "/manage/oss/ossEdit";	}	@ModelAttribute	public void initStrutsActionParam(){		this.server = ossService ;	}	public ManageCache getManageCache() {		return manageCache;	}	public void setManageCache(ManageCache manageCache) {		this.manageCache = manageCache;	}	public OssService getOssService() {		return ossService;	}	protected void selectListAfter() {		pager.setPagerUrl(getBasePath()+"/manage/oss/selectList.action");	}	public void setOssService(OssService ossService) {		this.ossService = ossService;	}	public Oss getE() {		return this.e;	}	public void prepare() throws Exception {		if (this.e == null) {			this.e = new Oss();		}	}	public void insertAfter(Oss e) {		e.clear();	}		@Override	public String insert() throws Exception {		comm();		getServer().insert(getE());		e.clear();		manageCache.loadOSS();		return selectList();	}		@Override	public String update() throws Exception {		comm();		getServer().update(getE());		e.clear();		manageCache.loadOSS();		return selectList();	}		@Override	public String deletes() throws Exception {		throw new NotThisMethod(ManageContainer.not_this_method);	}		//根据code获取名称	private void comm() {		logger.error("comm..code="+e.getCode());				if(StringUtils.isBlank(e.getCode())){			throw new NullPointerException("code不能为空！");		}//		if(StringUtils.isBlank(e.getOssJsonInfo())){//			throw new NullPointerException("配置信息不能为空！");//		}				String name = KeyValueHelper.get("oss_code_"+e.getCode());		if(StringUtils.isBlank(name)){			throw new NullPointerException("未配置"+e.getCode()+"的存储方式的键值对！");		}				e.setName(name);				/*		 * 对配置信息项进行检查		 */		if(e.getCode().equals(Oss.code_aliyun)){//阿里云			logger.error("e.getAliyunOSS().toString()="+e.getAliyunOSS().toString());						try {				e.setOssJsonInfo(JSON.toJSONString(e.getAliyunOSS()));			} catch (Exception e) {				e.printStackTrace();			}//			AliyunOSS oss = JSON.parseObject(e.getOssJsonInfo(), AliyunOSS.class);//			if(oss==null){//				throw new RuntimeException("阿里云OSS的配置信息错误！");//			}		}	}		@Override	public String toEdit() throws Exception {		super.toEdit();		if(StringUtils.isNotBlank(e.getOssJsonInfo())){			try {				e.setAliyunOSS(JSON.parseObject(e.getOssJsonInfo(), AliyunOSS.class));			} catch (Exception e) {				e.printStackTrace();			}		}		return toEdit;	}		public static void main(String[] args) {		Map<String,String> map = new HashMap<String, String>();		map.put("ACCESS_ID", "xx");		map.put("ACCESS_KEY", "xx");		map.put("OSS_ENDPOINT", "http://oss.aliyuncs.com/");		map.put("bucketName", "xx");		System.out.println(JSON.toJSONString(map));	}}