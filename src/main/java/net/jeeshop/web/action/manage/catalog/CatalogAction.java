package net.jeeshop.web.action.manage.catalog;import java.io.IOException;import java.util.List;import net.jeeshop.core.BaseAction;import net.jeeshop.core.front.SystemManager;import net.jeeshop.core.oscache.FrontCache;import net.jeeshop.core.util.PinYinUtil;import net.jeeshop.services.manage.catalog.CatalogService;import net.jeeshop.services.manage.catalog.bean.Catalog;import net.sf.json.JSONArray;import org.apache.commons.lang.StringUtils;import org.slf4j.Logger;import org.slf4j.LoggerFactory;import org.springframework.beans.factory.annotation.Autowired;import org.springframework.context.annotation.Scope;import org.springframework.stereotype.Controller;import org.springframework.web.bind.annotation.ModelAttribute;import org.springframework.web.bind.annotation.RequestMapping;import com.alibaba.fastjson.JSON;/** * 商品分类,可以无限极分类 *  * @author huangf *  */@Scope("prototype")   @Controller   @RequestMapping("/manage/catalog") public class CatalogAction extends BaseAction<Catalog> {	private static final Logger logger = LoggerFactory.getLogger(CatalogAction.class);	private static final long serialVersionUID = 1L;		@Autowired	private CatalogService catalogService;	@Autowired	private FrontCache frontCache;	{		toList = "/manage/catalog/catalogList";		selectAllList = "redirect:selectList.action";		toAdd = "/manage/catalog/catalogEdit";		toEdit = "/manage/catalog/catalogEdit";	}		@ModelAttribute	public void initStrutsActionParam(){		this.server = catalogService ;	}		protected void selectListAfter() {		pager.setPagerUrl(getBasePath()+"/manage/catalog/selectList.action");	}	public Catalog getE() {		return this.e;	}	public void prepare() throws Exception {		if (this.e == null) {			this.e = new Catalog();		}	}	public void insertAfter(Catalog e) {	}	@Override	public String selectList() throws Exception {		String type = e.getType();		super.initPageSelect();		e.setType(type);		logger.error("CatalogAction.selectList.e.type="+e.getType());		return toList;	}	/**	 * 递归查询数据库获取商品目录	 * 返回tree的数据结构 从PID=0开始加载菜单资源 获取指定节点的全部子菜单（包括当前菜单节点）	 * 	 * @return	 * @throws Exception	 */	@RequestMapping("/getRoot")	public String getRoot() throws Exception {		List<Catalog> root = catalogService.loadRoot(getE());		JSONArray json = JSONArray.fromObject(root);		logger.info(json.toString());		String jsonStr = json.toString();		try {			response.getWriter().write(jsonStr);		} catch (Exception e) {			e.printStackTrace();		}		return null;	}	/**	 * 数据来自缓存	 * 返回适合easyui.treegrid的JSON的数据结构 从PID=0开始加载菜单资源 获取指定节点的全部子菜单（包括当前菜单节点）	 * 	 * @return	 * @throws Exception	 */	@RequestMapping("/getRootWithTreegrid")	public String getRootWithTreegrid() throws Exception {		logger.error(">>>selectList type = "+e.getType());				List<net.jeeshop.services.front.catalog.bean.Catalog> root = null;		if("p".equals(e.getType())){			//直接使用缓存数据			if(SystemManager.productCatalogJsonStr!=null){				super.write(SystemManager.productCatalogJsonStr);				return null;			}						root = SystemManager.catalogs;						JSONArray json = JSONArray.fromObject(root);			SystemManager.productCatalogJsonStr = json.toString();			super.write(SystemManager.productCatalogJsonStr);					}else if("a".equals(e.getType())){			//直接使用缓存数据			if(SystemManager.articleCatalogJsonStr!=null){				super.write(SystemManager.articleCatalogJsonStr);				return null;			}						root = SystemManager.catalogsArticle;						JSONArray json = JSONArray.fromObject(root);			SystemManager.articleCatalogJsonStr = json.toString();			super.write(SystemManager.articleCatalogJsonStr);		}else{			throw new IllegalAccessError("参数异常。");		}				return null;	}	/**	 * 根据ID删除指定的目录,如果该类目下面有子类目,则会一并删除;如果该类目下面有商品,则会一并删除	 * 	 * @return	 * @throws Exception	 */	@RequestMapping("/deleteByID")	public String deleteByID() throws Exception {		String id = request.getParameter("id");		if (StringUtils.isBlank(id)) {			throw new NullPointerException("参数不正确！");		}				boolean isSuccess = catalogService.deleteByID(id);		logger.error("isSuccess=" + isSuccess);		reset();		super.write(String.valueOf(isSuccess));		return null;	}		/**	 * 添加/修改/删除 某一个类别后，需要重新加载缓存数据。并且清除JSON字符串缓存，以便重新生成新的。	 * @throws Exception	 */	private void reset() throws Exception{		SystemManager.productCatalogJsonStr = null;		SystemManager.articleCatalogJsonStr = null;		frontCache.loadCatalogs(true);//同步更新缓存	}	/**	 * 不支持批量删除	 */	@RequestMapping("/deletes")	public String deletes() throws Exception {		throw new NullPointerException();	}	@Override	public String toAdd() throws Exception {		String type = getE().getType();		logger.error("CatalogAction.toAdd.type="+e.getType());		getE().clear();		getE().setType(type);		model.addAttribute("e", e);		return toAdd;	}	@Override	public String toEdit() throws Exception {		if(StringUtils.isBlank(e.getId())){			throw new NullPointerException("非法请求！");		}		String _id = e.getId();		e.clear();		e.setId(_id);		e = getServer().selectOne(e);				if(e==null){			throw new NullPointerException("非法请求！");		}		model.addAttribute("e", e);		return toEdit;	}	/**	 * 返回到查询页面	 */	public String back() throws Exception {		return selectList();	}		public String insert() throws Exception {		if(StringUtils.isBlank(e.getPid())){			e.setPid("0");		}		String type = e.getType();		logger.error("type = "+type);		try {			getServer().insert(getE());			e.clear();		} catch (Exception e) {			e.printStackTrace();			throw e;		}				reset();		getE().setType(type);		model.addAttribute("e", e);		return super.selectAllList+"?type="+getE().getType();	}		public String update() throws Exception {		String type = e.getType();		String name= e.getName();		logger.error("type = "+type);		try {			getServer().update(getE());			e.clear();		} catch (Exception e) {			e.printStackTrace();			throw e;		}				reset();		getE().setType(type);		model.addAttribute("e", e);		return super.selectAllList+"?type="+getE().getType();	}		/**	 * 唯一性检查	 * @return	 * @throws IOException 	 */	@RequestMapping("/unique")	public String unique() throws IOException{		logger.error("unique code = " + e.getCode());		synchronized (this) {			if(StringUtils.isNotBlank(e.getCode())){				Catalog catalog = new Catalog();				catalog.setCode(e.getCode());				catalog = catalogService.selectOne(catalog);				logger.error("=============catalog = "+JSON.toJSONString(catalog));								if(catalog==null){					//数据库中部存在此编码					response.getWriter().write("{\"ok\":\"编码可以使用!\"}");				}else{					if(StringUtils.isBlank(e.getId()) || !catalog.getId().equals(e.getId()) ){						//当前为insert操作，但是编码已经存在，则只可能是别的记录的编码						response.getWriter().write("{\"error\":\"编码已经存在!\"}");					}else{						//update操作，又是根据自己的编码来查询的，所以当然可以使用啦						response.getWriter().write("{\"ok\":\"编码可以使用!\"}");					}				}			}else{				response.getWriter().write("{\"error\":\"编码不能为空!\"}");			}		}		return null;	}		/**	 * 根据类别名称自动获取拼音-ajax	 * @return	 * @throws IOException 	 */	@RequestMapping("/autoCode")	public String autoCode() throws IOException{		if(StringUtils.isBlank(e.getName())){			return null;		}				String pinyin = PinYinUtil.getPingYin(e.getName());		logger.error("pinyin="+pinyin);		while(true){			Catalog c = new Catalog();			c.setCode(pinyin);			c = catalogService.selectOne(c);			if(c==null){				super.write(pinyin);				break;			}else{				pinyin = pinyin + "1";			}		}		return null;	}}